<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_com_data_int. IntegrationsUtilsSNC</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name> IntegrationsUtilsSNC</name>
        <script><![CDATA[var IntegrationsUtilsSNC = Class.create();
IntegrationsUtilsSNC.prototype = {
    initialize: function() {},

    createJobTracker: function(source, jobName) {
        var trackerGr = new GlideRecord('x_snc_com_data_int_integration_job_tracker');
        trackerGr.job_name = jobName;
        trackerGr.source = source;
        trackerGr.job_start_time = new GlideDateTime();
        trackerGr.insert();
    },

    createServiceJobTracker: function(jobId, service, set) {
        var serviceTrackerGr = new GlideRecord('x_snc_com_data_int_integration_service_job_tracker');
        serviceTrackerGr.set = set;
        serviceTrackerGr.integration_service = service;
        serviceTrackerGr.integrations_job_tracker = jobId;
        serviceTrackerGr.state = 'pending';
        //serviceTrackerGr.last_run_date=this.getLastSuccessfulServiceRunDate(service);
        serviceTrackerGr.insert();
    },

    createImportSet: function(tableName, mode, shortDescription) {
        var importSetGr = new GlideRecord('sys_import_set');
        importSetGr.initialize();
        importSetGr.table_name = tableName;
        importSetGr.mode = mode;
        importSetGr.short_description = shortDescription;
        return importSetGr.insert();
    },

    getLastSuccessfulServiceRunDate: function(service) {
        // gives last successful service record fetch date
        var serviceTrackerGr = new GlideRecord('x_snc_com_data_int_integration_service_job_tracker');
        serviceTrackerGr.addQuery('integration_service', service);
        serviceTrackerGr.addQuery('state', 'complete');
        serviceTrackerGr.orderByDesc('load_started_at');
        serviceTrackerGr.query();
        if (!serviceTrackerGr.next())
            return '';
        var jobTrackerGr = new GlideRecord('x_snc_com_data_int_integration_job_tracker');
        jobTrackerGr.get(serviceTrackerGr.integrations_job_tracker);
        jobTrackerGr.query();
        if (!jobTrackerGr.next())
            return '';
        return jobTrackerGr.getDisplayValue('job_start_time');
    },

    transformImportSet: function(importSetId) {
        var importSetGr = new GlideRecord("sys_import_set");
        //importSetGr.get(importSetId);
        importSetGr.addQuery("sys_id", importSetId);
        importSetGr.query();
        if (importSetGr.next()) {
            gs.info("inside  IntegrationsUtilsSNC 5 " + importSetGr.getValue('sys_id'));
        }
        var importSetRun = new GlideImportSetRun(importSetId);
        var importLog = new GlideImportLog(importSetRun, "Integrations Transform");
        var transformer = new GlideImportSetTransformer();
        //gs.info("inside  IntegrationsUtilsSNC 5 ");
        transformer.setLogger(importLog);
        transformer.setImportSetRun(importSetRun);
        transformer.setSyncImport(true);
        transformer.setImportSetID(importSetId);
        transformer.transformAllMaps(importSetGr);
     
    },

    isFullPull: function(fullPull, modifiedDate) {
        var propertyValue = 'true';
        if (!gs.nil(fullPull) && propertyValue == fullPull.toLowerCase())
            return true;
        if (gs.nil(modifiedDate))
            return true;
        return false;
    },

    getPulledTodo: function(todoID) {
        var todoObj = {
            description: "",
            url: "",
            finished: false,
            createdTime: ""
        };
        var pullGr = new GlideRecord('sn_hr_integr_fw_todo_inbound');
        if (pullGr.get(todoID) && pullGr.canRead()) {
            todoObj.description = pullGr.getValue("todo_description");
            todoObj.url = pullGr.getValue("todo_url");
            todoObj.finished = (pullGr.getValue("todo_state") == 3);
        }

        return todoObj;
    },

    isNotRunning: function(source) {
        gs.info("inside sncUtils isNotRunning sysid " + source);
        var job = new GlideRecord('x_snc_com_data_int_integration_job_tracker');
        //job.addQuery('u_source', source) ;
        job.addQuery('state', 'running');
        job.addEncodedQuery('source.sys_id=' + source);
        job.orderByDesc('job_start_time');
        job.query();

        if (!job.next()) {
            gs.info("inside sncUtils isNotRunning  returning true");
            return true;
        }
        return false;
    },

    getTransformHelper: function(sourceRecord, extensionName) {
        var source = sourceRecord.source;
        if (gs.nil(source))
            return;
        var extensionCacheKey = source + "_" + extensionName;
        if (!gs.nil(IntegrationsUtilSNC.extension) && !gs.nil(IntegrationsUtilSNC.extension[extensionCacheKey])) {
            return IntegrationsUtilsSNC.extension[extensionCacheKey];
        }
        var ep = new GlideScriptedExtensionPoint().getExtensions(extensionName);
        for (var i = 0; i < ep.length; i++) {
            if (ep[i].canHandle(sourceRecord)) {
                if (gs.nil(IntegrationsUtilSNC.extension)) {
                    IntegrationsUtilSNC.extension = {};
                }
                IntegrationsUtilsSNC.extension[extensionCacheKey] = ep[i];
                return ep[i];
            }
        }
    },

    parseExecuteRFC: function(rfcJson, deli) {
        var count, actualCount;
        var jsonOut1 = rfcJson;
        deli = deli.toString().trim();
        var jsonOut2 = jsonOut1.IT_DATA;
        var json_final = [];

        var jsonOut3 = jsonOut1.IT_DATA;
        count = jsonOut3[0];
        actualCount = (count.WA).split(":")[1];

        var total_rows = actualCount;

        for (var i = 1; i < jsonOut2.length; i++) {
            var json_array = [];
            for (var z = 0; z < Object.keys(jsonOut2[i]).length; z++) {
                var y = '';
                if (z == 0)
                    y = "WA";
                else
                    y = "WA" + z;
                if (gs.nil(JSON.stringify(jsonOut2[i][y])) || JSON.stringify(jsonOut2[i][y]) == 'null') {
                    break;
                }
                var colJson = JSON.parse(JSON.stringify(jsonOut2[i][y]));
                var colsString = colJson.toString();
                var colsArray = colsString.split(deli);
                var Json_array_obj = {};

                for (var j = 0; j < colsArray.length; j++) {
                    var keyValuePair = colsArray[j];
                    Json_array_obj[(keyValuePair.split(":")[0])] = (keyValuePair.split(":")[1]);
                    Json_array_obj = this.trimInputs(Json_array_obj);
                }

                if (!Object.keys(Json_array_obj).length == 0) {
                    json_array.push(JSON.stringify(Json_array_obj));
                }
            }
            json_final.push(json_array.join("").replace(/{}/g, "").replace(/}{/g, ","));
        }
        var returnArray = {};
        returnArray["JSONOBJECT"] = (this.seggregateArr(json_final));
        returnArray["ROWCOUNT"] = total_rows;
        return returnArray;
    },

    trimInputs: function(inputs) {
        for (var key in inputs) {
            if (typeof(inputs[key]) == 'string') {
                inputs[key] = inputs[key].trim();
            }
        }
        return inputs;
    },

    seggregateArr: function(jsonString) {
        var arr = [];
        for (var i = 0; i < jsonString.length; i++) {
            arr.push(JSON.parse(jsonString[i]));
        }
        return arr;
    },

    type: 'IntegrationsUtilsSNC'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Mayank</sys_created_by>
        <sys_created_on>2022-10-12 08:49:37</sys_created_on>
        <sys_id>e2b020f087aadd50fd73642d0ebb3583</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>93c7f5cb875a1950fd73642d0ebb3590</sys_name>
        <sys_package display_value="Primary Data Integration for SAP" source="x_snc_com_data_int">93c7f5cb875a1950fd73642d0ebb3590</sys_package>
        <sys_policy/>
        <sys_scope display_value="Primary Data Integration for SAP">93c7f5cb875a1950fd73642d0ebb3590</sys_scope>
        <sys_update_name>sys_script_include_e2b020f087aadd50fd73642d0ebb3583</sys_update_name>
        <sys_updated_by>bcone</sys_updated_by>
        <sys_updated_on>2022-11-19 14:13:25</sys_updated_on>
    </sys_script_include>
</record_update>
